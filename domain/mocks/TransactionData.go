// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "finance/domain"

	mock "github.com/stretchr/testify/mock"
)

// TransactionData is an autogenerated mock type for the TransactionData type
type TransactionData struct {
	mock.Mock
}

// GetTransactionID provides a mock function with given fields: TransactionID
func (_m *TransactionData) GetTransactionID(TransactionID int) []domain.Transaction {
	ret := _m.Called(TransactionID)

	var r0 []domain.Transaction
	if rf, ok := ret.Get(0).(func(int) []domain.Transaction); ok {
		r0 = rf(TransactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: insertTransaction
func (_m *TransactionData) Insert(insertTransaction domain.Transaction) domain.Transaction {
	ret := _m.Called(insertTransaction)

	var r0 domain.Transaction
	if rf, ok := ret.Get(0).(func(domain.Transaction) domain.Transaction); ok {
		r0 = rf(insertTransaction)
	} else {
		r0 = ret.Get(0).(domain.Transaction)
	}

	return r0
}

type mockConstructorTestingTNewTransactionData interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionData creates a new instance of TransactionData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionData(t mockConstructorTestingTNewTransactionData) *TransactionData {
	mock := &TransactionData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
