// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "finance/domain"

	mock "github.com/stretchr/testify/mock"
)

// TransactionUseCase is an autogenerated mock type for the TransactionUseCase type
type TransactionUseCase struct {
	mock.Mock
}

// AddTransaction provides a mock function with given fields: newData
func (_m *TransactionUseCase) AddTransaction(newData domain.Transaction) (domain.Transaction, error) {
	ret := _m.Called(newData)

	var r0 domain.Transaction
	if rf, ok := ret.Get(0).(func(domain.Transaction) domain.Transaction); ok {
		r0 = rf(newData)
	} else {
		r0 = ret.Get(0).(domain.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Transaction) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpecificTransaction provides a mock function with given fields: TransactionID
func (_m *TransactionUseCase) GetSpecificTransaction(TransactionID int) ([]domain.Transaction, error) {
	ret := _m.Called(TransactionID)

	var r0 []domain.Transaction
	if rf, ok := ret.Get(0).(func(int) []domain.Transaction); ok {
		r0 = rf(TransactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(TransactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionUseCase creates a new instance of TransactionUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionUseCase(t mockConstructorTestingTNewTransactionUseCase) *TransactionUseCase {
	mock := &TransactionUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
