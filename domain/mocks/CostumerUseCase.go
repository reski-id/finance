// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "finance/domain"

	mock "github.com/stretchr/testify/mock"
)

// CostumerUseCase is an autogenerated mock type for the CostumerUseCase type
type CostumerUseCase struct {
	mock.Mock
}

// AddCostumer provides a mock function with given fields: newData
func (_m *CostumerUseCase) AddCostumer(newData domain.Costumer) (domain.Costumer, error) {
	ret := _m.Called(newData)

	var r0 domain.Costumer
	if rf, ok := ret.Get(0).(func(domain.Costumer) domain.Costumer); ok {
		r0 = rf(newData)
	} else {
		r0 = ret.Get(0).(domain.Costumer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Costumer) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelCostumer provides a mock function with given fields: IDCostumer
func (_m *CostumerUseCase) DelCostumer(IDCostumer int) (bool, error) {
	ret := _m.Called(IDCostumer)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(IDCostumer)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(IDCostumer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllData provides a mock function with given fields:
func (_m *CostumerUseCase) GetAllData() ([]domain.Costumer, error) {
	ret := _m.Called()

	var r0 []domain.Costumer
	if rf, ok := ret.Get(0).(func() []domain.Costumer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Costumer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpecificCostumer provides a mock function with given fields: CostumerID
func (_m *CostumerUseCase) GetSpecificCostumer(CostumerID int) ([]domain.Costumer, error) {
	ret := _m.Called(CostumerID)

	var r0 []domain.Costumer
	if rf, ok := ret.Get(0).(func(int) []domain.Costumer); ok {
		r0 = rf(CostumerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Costumer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(CostumerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpCostumer provides a mock function with given fields: IDCostumer, updateData
func (_m *CostumerUseCase) UpCostumer(IDCostumer int, updateData domain.Costumer) (domain.Costumer, error) {
	ret := _m.Called(IDCostumer, updateData)

	var r0 domain.Costumer
	if rf, ok := ret.Get(0).(func(int, domain.Costumer) domain.Costumer); ok {
		r0 = rf(IDCostumer, updateData)
	} else {
		r0 = ret.Get(0).(domain.Costumer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Costumer) error); ok {
		r1 = rf(IDCostumer, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCostumerUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCostumerUseCase creates a new instance of CostumerUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCostumerUseCase(t mockConstructorTestingTNewCostumerUseCase) *CostumerUseCase {
	mock := &CostumerUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
