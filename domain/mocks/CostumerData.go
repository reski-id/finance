// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "finance/domain"

	mock "github.com/stretchr/testify/mock"
)

// CostumerData is an autogenerated mock type for the CostumerData type
type CostumerData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: IDCostumer
func (_m *CostumerData) Delete(IDCostumer int) error {
	ret := _m.Called(IDCostumer)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(IDCostumer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *CostumerData) GetAll() []domain.Costumer {
	ret := _m.Called()

	var r0 []domain.Costumer
	if rf, ok := ret.Get(0).(func() []domain.Costumer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Costumer)
		}
	}

	return r0
}

// GetCostumerID provides a mock function with given fields: CostumerID
func (_m *CostumerData) GetCostumerID(CostumerID int) []domain.Costumer {
	ret := _m.Called(CostumerID)

	var r0 []domain.Costumer
	if rf, ok := ret.Get(0).(func(int) []domain.Costumer); ok {
		r0 = rf(CostumerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Costumer)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: insertCostumer
func (_m *CostumerData) Insert(insertCostumer domain.Costumer) domain.Costumer {
	ret := _m.Called(insertCostumer)

	var r0 domain.Costumer
	if rf, ok := ret.Get(0).(func(domain.Costumer) domain.Costumer); ok {
		r0 = rf(insertCostumer)
	} else {
		r0 = ret.Get(0).(domain.Costumer)
	}

	return r0
}

// Update provides a mock function with given fields: IDCostumer, updatedCostumer
func (_m *CostumerData) Update(IDCostumer int, updatedCostumer domain.Costumer) domain.Costumer {
	ret := _m.Called(IDCostumer, updatedCostumer)

	var r0 domain.Costumer
	if rf, ok := ret.Get(0).(func(int, domain.Costumer) domain.Costumer); ok {
		r0 = rf(IDCostumer, updatedCostumer)
	} else {
		r0 = ret.Get(0).(domain.Costumer)
	}

	return r0
}

type mockConstructorTestingTNewCostumerData interface {
	mock.TestingT
	Cleanup(func())
}

// NewCostumerData creates a new instance of CostumerData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCostumerData(t mockConstructorTestingTNewCostumerData) *CostumerData {
	mock := &CostumerData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
