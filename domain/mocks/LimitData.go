// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "finance/domain"

	mock "github.com/stretchr/testify/mock"
)

// LimitData is an autogenerated mock type for the LimitData type
type LimitData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: IDLimit
func (_m *LimitData) Delete(IDLimit int) error {
	ret := _m.Called(IDLimit)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(IDLimit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLimitID provides a mock function with given fields: LimitID
func (_m *LimitData) GetLimitID(LimitID int) []domain.Limit {
	ret := _m.Called(LimitID)

	var r0 []domain.Limit
	if rf, ok := ret.Get(0).(func(int) []domain.Limit); ok {
		r0 = rf(LimitID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Limit)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: insertLimit
func (_m *LimitData) Insert(insertLimit domain.Limit) domain.Limit {
	ret := _m.Called(insertLimit)

	var r0 domain.Limit
	if rf, ok := ret.Get(0).(func(domain.Limit) domain.Limit); ok {
		r0 = rf(insertLimit)
	} else {
		r0 = ret.Get(0).(domain.Limit)
	}

	return r0
}

// Update provides a mock function with given fields: IDLimit, updatedLimit
func (_m *LimitData) Update(IDLimit int, updatedLimit domain.Limit) domain.Limit {
	ret := _m.Called(IDLimit, updatedLimit)

	var r0 domain.Limit
	if rf, ok := ret.Get(0).(func(int, domain.Limit) domain.Limit); ok {
		r0 = rf(IDLimit, updatedLimit)
	} else {
		r0 = ret.Get(0).(domain.Limit)
	}

	return r0
}

type mockConstructorTestingTNewLimitData interface {
	mock.TestingT
	Cleanup(func())
}

// NewLimitData creates a new instance of LimitData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLimitData(t mockConstructorTestingTNewLimitData) *LimitData {
	mock := &LimitData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
