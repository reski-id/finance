// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "finance/domain"

	mock "github.com/stretchr/testify/mock"
)

// LimitUseCase is an autogenerated mock type for the LimitUseCase type
type LimitUseCase struct {
	mock.Mock
}

// AddLimit provides a mock function with given fields: newData
func (_m *LimitUseCase) AddLimit(newData domain.Limit) (domain.Limit, error) {
	ret := _m.Called(newData)

	var r0 domain.Limit
	if rf, ok := ret.Get(0).(func(domain.Limit) domain.Limit); ok {
		r0 = rf(newData)
	} else {
		r0 = ret.Get(0).(domain.Limit)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Limit) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelLimit provides a mock function with given fields: IDLimit
func (_m *LimitUseCase) DelLimit(IDLimit int) (bool, error) {
	ret := _m.Called(IDLimit)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(IDLimit)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(IDLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpecificLimit provides a mock function with given fields: LimitID
func (_m *LimitUseCase) GetSpecificLimit(LimitID int) ([]domain.Limit, error) {
	ret := _m.Called(LimitID)

	var r0 []domain.Limit
	if rf, ok := ret.Get(0).(func(int) []domain.Limit); ok {
		r0 = rf(LimitID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Limit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(LimitID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpLimit provides a mock function with given fields: IDLimit, updateData
func (_m *LimitUseCase) UpLimit(IDLimit int, updateData domain.Limit) (domain.Limit, error) {
	ret := _m.Called(IDLimit, updateData)

	var r0 domain.Limit
	if rf, ok := ret.Get(0).(func(int, domain.Limit) domain.Limit); ok {
		r0 = rf(IDLimit, updateData)
	} else {
		r0 = ret.Get(0).(domain.Limit)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Limit) error); ok {
		r1 = rf(IDLimit, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLimitUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewLimitUseCase creates a new instance of LimitUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLimitUseCase(t mockConstructorTestingTNewLimitUseCase) *LimitUseCase {
	mock := &LimitUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
